library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
#library(readxl)
# library(knitr)
# library(rmarkdown)
library(simmer)
library(simmer.plot)
simulationTimeBank<-5*60;
##----------------------------------------- 3.  Init Simulation and add all resources  ------------------------------------------------
bank <-
simmer("bank") %>%
add_resource(name="counter",capacity=1,queue_size=Inf)
##----------------------------------------- 4.  All trajectories, start from main trajectory and add sub-trajectories ABOVE IT it . ------------------------------------------------
#bulid trajectory - option 1
customer <-
trajectory("Customer's path") %>%
log_("i arrived")%>%
seize(resource = "counter",amount = 1)%>%
timeout(2)%>%
release(resource = "counter",amount = 1)
#bulid trajectory - option 2- using addService function
# customer <-
#     trajectory("Customers path") %>%
#     log_("i arrived")%>%
#     addService(sname = "counter", timeDist = 2)
##----------------------------------------- 5.  All Generators, ALWAYS LAST. ------------------------------------------------
bank %>%
add_generator(name="Customer", trajectory=customer, distribution=function() rexp(1,2))
##----------------------------------------- 6.  reset, run, plots, outputs ------------------------------------------------
set.seed(456)
reset(bank)%>%run(until=simulationTimeBank)
# plots
plot(customer)
resourcesData <- get_mon_resources(bank)
View(resourcesData)
arrivalData <- get_mon_arrivals(bank, ongoing = F)
View(arrivalData)
paste("The number of entities that completed the simulation is: ",sum(arrivalData$finished))
addService<- function  (trajectory,sname,timeDist){
updatedPath <- seize(trajectory, resource = sname, amount = 1)%>%
timeout(timeDist) %>%
release(resource = sname, amount = 1)
return(updatedPath)
}
customer <-
trajectory("Customers path") %>%
log_("i arrived")%>%
addService(sname = "counter", timeDist = 2)
set.seed(456)
simulationTimeBank<-5*60;
openTime<-runif(1,10,20)
door_schedule<-schedule(timetable = c(0, openTime), values = c(0, Inf), period = Inf)
bank <-
simmer("bank") %>%
add_resource(name="door",capacity= door_schedule, queue_size=Inf) %>%
add_resource(name="counter",capacity=1,queue_size=Inf)
addService<- function  (trajectory,sname,timeDist){
updatedPath <- seize(trajectory, resource = sname, amount = 1)%>%
timeout(timeDist) %>%
release(resource = sname, amount = 1)
return(updatedPath)
}
customer <-
trajectory("Customer's path") %>%
seize(resource = "door", amount = 1)%>%
release(resource = "door",amount = 1)%>%
log_("I can go in!") %>%
addService(sname = "counter", timeDist = 2)
bank %>%
add_generator(name="Customer", trajectory=customer, distribution=function() rexp(1,2))#%>%
# add_generator(name="Doorman", trajectory=doorman, distribution=at(0))
reset(bank)%>%run(until=simulationTimeBank)
resourceData <- get_mon_resources(bank)
bankData<-get_mon_arrivals(bank,ongoing = F, per_resource = T)
View(bankData)
paste("The number of customers who waited by the door from 10AM until the opening is:",
max(subset(resourceData, resource == "door" & capacity== 0, select="queue")))
paste("The number of customers who waited by the door from 10AM until the opening is:",
sqldf("select MAX(queue)
from resourceData
where resource == 'door' and capacity == 0 "))
View(resourceData)
View(resourceData)
simulationTimeBank<-5*60;
simulationTimeBankRenege<-5*60;
bankRenege <-
simmer("bank renege") %>%
add_resource(name="counter",capacity=1,queue_size=Inf)
addServiceRenge<- function  (trajectory,sname,timeDist,renegDist){
updatedPath <- renege_in(trajectory,renegDist,out=trajectory()%>%log_("I left angry!") )%>%
seize(resource = sname, amount = 1)%>%
renege_abort()%>%
timeout(timeDist) %>%
release(resource = sname, amount = 1)
return(updatedPath)
}
customerAngry <-
trajectory("angry_cust path") %>%
log_("hello!")%>%
addServiceRenge(sname = "counter", timeDist = 2, renegDist = function() runif(1, min=3, max=5) )
## ------------------------------------------------------bank model- RENEGEING-----------------------------------------------------------
##----------------------------------------- 1.  all functions ------------------------------------------------
## add service renege
addServiceRenge<- function  (trajectory,sname,timeDist,renegDist){
updatedPath <- renege_in(trajectory,renegDist,out=trajectory()%>%log_("I left angry!") )%>%
seize(resource = sname, amount = 1)%>%
renege_abort()%>%
timeout(timeDist) %>%
release(resource = sname, amount = 1)
return(updatedPath)
}
##----------------------------------------- 2.  all simulation parameters ------------------------------------------------
simulationTimeBankRenege<-5*60;
##----------------------------------------- 3.  Init Simulation and add all resources  ------------------------------------------------
bankRenege <-
simmer("bank renege") %>%
add_resource(name="counter",capacity=1,queue_size=Inf)
##----------------------------------------- 4.  All trajectories, start from main trajectory and add sub-trajectories ABOVE IT it . ------------------------------------------------
customerAngry <-
trajectory("angry_cust path") %>%
log_("hello!")%>%
addServiceRenge(sname = "counter", timeDist = 2, renegDist = function() runif(1, min=3, max=5) )
##----------------------------------------- 5.  All Generators, ALWAYS LAST. ------------------------------------------------
bankRenege%>%
add_generator(name="angry", trajectory=customerAngry, distribution=function() rexp(1,2))
##----------------------------------------- 6.  reset, run, plots, outputs ------------------------------------------------
set.seed(456)
reset(bankRenege)%>%run(until=simulationTimeBankRenege)
bankRenegeData<- get_mon_arrivals(bankRenege)%>%
mutate(waiting_time = end_time - start_time - activity_time)
View(bankRenegeData)
paste("Average wait for ", sum(bankRenegeData$finished), " completions was ",
mean(bankRenegeData$waiting_time), "minutes.")
leavers<- sum(bankRenegeData$activity_time==0)
leavingPercent<-leavers/dim(bankRenegeData)[1]
leavingPercent
bank_flow <-
get_mon_arrivals(bankRenege) %>%
mutate(flow = end_time - start_time)
avgFlow <-   sqldf("select  avg(flow)
from bank_flow
where activity_time <> 0")%>%print()
avgFlow2 <- mean(filter(bank_flow, activity_time!=0)$flow)%>%print()
avgFlow3 <- mean(bank_flow[bank_flow$activity_time!=0,"flow"])%>%
print()
# plots    ###### can also be used for validation!!!!!
plot(customerAngry)
plot(get_mon_resources(bankRenege), metric = "usage", c("counter"), items = c("server","queue"),steps=TRUE)# the queue changed because the entities abort
plot(get_mon_arrivals(bankRenege), metric = "flow_time")# we can see we have no time past 7, because max wait is 5 and service is 2.
simulationTimeClinic <- 480
##----------------------------------------- 3.  Init Simulation and add all resources  ------------------------------------------------
clinic<-simmer("clinic2")%>%
add_resource(name="nurse",capacity=2,queue_size=Inf)%>%
add_resource(name="doctor",capacity=1,queue_size=Inf)
patient<-trajectory("patient's path") %>%
addService(sname = "nurse", timeDist = function() rexp(1,1/5))%>%
branch(option=function() rdiscrete (1, c(0.2,0.3,0.5),c(0,1,2)) ,continue= c(FALSE,TRUE),patientOut,patientExtraChecks)%>%
addService(sname = "doctor", timeDist = function() rnorm(1,4,0.3))
addService<- function  (path,sname,timeDist){
updatedPath <- seize(path, resource = sname, amount = 1)%>%
timeout(timeDist) %>%
release(resource = sname,  amount = 1)
return(updatedPath)
}
patient<-trajectory("patient's path") %>%
addService(sname = "nurse", timeDist = function() rexp(1,1/5))%>%
branch(option=function() rdiscrete (1, c(0.2,0.3,0.5),c(0,1,2)) ,continue= c(FALSE,TRUE),patientOut,patientExtraChecks)%>%
addService(sname = "doctor", timeDist = function() rnorm(1,4,0.3))
patientExtraChecks<-trajectory("Nurse extra checks")%>%
addService(sname = "nurse", timeDist = function()rexp(1,1/5))
patientOut<-trajectory("leave Early")%>%
timeout(0)
patient<-trajectory("patient's path") %>%
addService(sname = "nurse", timeDist = function() rexp(1,1/5))%>%
branch(option=function() rdiscrete (1, c(0.2,0.3,0.5),c(0,1,2)) ,continue= c(FALSE,TRUE),patientOut,patientExtraChecks)%>%
addService(sname = "doctor", timeDist = function() rnorm(1,4,0.3))
## ------------------------------------------------------clinic extended  model - branching-----------------------------------------------------------
##----------------------------------------- 1.  all functions ------------------------------------------------
## add service
addService<- function  (path,sname,timeDist){
updatedPath <- seize(path, resource = sname, amount = 1)%>%
timeout(timeDist) %>%
release(resource = sname,  amount = 1)
return(updatedPath)
}
##----------------------------------------- 2.  all simulation parameters ------------------------------------------------
simulationTimeClinic <- 480
##----------------------------------------- 3.  Init Simulation and add all resources  ------------------------------------------------
clinic<-simmer("clinic2")%>%
add_resource(name="nurse",capacity=2,queue_size=Inf)%>%
add_resource(name="doctor",capacity=1,queue_size=Inf)
##----------------------------------------- 4.  All trajectories, start from main trajectory and add sub-trajectories ABOVE IT it . ------------------------------------------------
patientExtraChecks<-trajectory("Nurse extra checks")%>%
addService(sname = "nurse", timeDist = function()rexp(1,1/5))
patientOut<-trajectory("leave Early")%>%
timeout(0)
patient<-trajectory("patient's path") %>%
addService(sname = "nurse", timeDist = function() rexp(1,1/5))%>%
branch(option=function() rdiscrete (1, c(0.2,0.3,0.5),c(0,1,2)) ,continue= c(FALSE,TRUE),patientOut,patientExtraChecks)%>%
addService(sname = "doctor", timeDist = function() rnorm(1,4,0.3))
##----------------------------------------- 5.  All Generators, ALWAYS LAST. ------------------------------------------------
clinic%>%
add_generator(name="patients",trajectory=patient,distribution=function() rexp(1, 0.5))
##----------------------------------------- 6.  reset, run, plots, outputs ------------------------------------------------
set.seed(456)
reset(clinic)%>%run(until=simulationTimeClinic)
clinicData<-get_mon_arrivals(clinic, per_resource = T)
clinicData1<-(sqldf("select name, count(*) as rep  from clinicData
group by name"))#SubQuery
paste(sqldf("select count(*)
from (select name, count(*) as rep  from clinicData
group by name)
where rep ==1") ,
"entities went home after the first inspection.")
View(clinicData)
View(clinicData1)
library("plotrix")
install.packages("scatterplot3d")
install.packages("moments")
install.packages("readr")
install.packages("ggplot2")
install.packages("sqldf")
install.packages("plotrix")
library("plotrix")
Bike_Sharing <- read_csv("C:/Users/Nimrod/Desktop/Bike Sharing.csv",
col_names = FALSE, col_types = cols(X12 = col_skip(),
X13 = col_skip(), X14 = col_skip()), skip = 1)
